\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{science}[2021/02/16 v1.1 science macros]
\RequirePackage[binary-units=true]{siunitx}
\RequirePackage{listings}
\RequirePackage{comment}
\RequirePackage{xspace}


% Useful commands

\newcommand{\etal}{et al.\@\xspace}
\newcommand{\eg}[0]{e.\,g.\@\xspace}
\newcommand{\ie}[0]{i.\,e.\@\xspace}
\newcommand{\etc}[0]{etc.\@\xspace}
\newcommand{\wrt}{w.\,r\,.t\@\xspace}

\newcommand{\set}[1]{\ensuremath{\left \{ #1 \right \}}}
\newcommand{\tuple}[1]{\ensuremath{\left \langle #1 \right \rangle }}
\newcommand{\code}[1]{\lstinline{#1}}
\newcommand{\uml}[1]{\texttt{\textbf{#1}}}



% Listings.sty grammars

\lstnewenvironment{java}{\lstset{language=Java,
		frame=tb,
        tabsize=3,
        morekeywords={implies, in, result},
        basicstyle=\footnotesize,
        keywordstyle=\bfseries,
        ndkeywordstyle=\bfseries,
        commentstyle=\itshape\magenta,
				morecomment=[l]{--},
        stringstyle=\ttfamily,
		showspaces=false,
		sensitive=true,
		extendedchars=\true,
        flexiblecolumns,
        literate={->}{$\to$}{2} {--}{-$\,$-}{2} {<=}{$\le$}{2} {>=}{$\ge$}{2} {<>}{$<\,>$}{3},
 	  	}}{}
		
\lstnewenvironment{ocl}{
	\lstset{
		language=[decorative]OCL,
		style=ocl,
		frame=tb,
		tabsize=3,
		basicstyle=\footnotesize,
		keywordstyle=\bfseries,
		ndkeywordstyle=\bfseries,
		commentstyle=\itshape,
		stringstyle=\ttfamily,
		showspaces=false,
		flexiblecolumns,
		sensitive, extendedchars, texcl
	}
}{}

\lstnewenvironment{atl}{
	\lstset{
		language=ATL,
		frame=tb,
		tabsize=3,
		basicstyle=\footnotesize,
		keywordstyle=\bfseries,
		ndkeywordstyle=\bfseries,
		commentstyle=\itshape,
		stringstyle=\ttfamily,
		showspaces=false,
		flexiblecolumns,
		sensitive, extendedchars, texcl
	}
}{}

\lstnewenvironment{tdl}{
	\lstset{
		language=TDL,
		frame=tb,
		tabsize=3,
		basicstyle=\footnotesize,
		keywordstyle=\bfseries,
		ndkeywordstyle=\bfseries,
		commentstyle=\itshape,
		stringstyle=\ttfamily,
		showspaces=false,
		flexiblecolumns,
		sensitive, extendedchars, texcl
	}
}{}

\lstdefinestyle{ocl}{
	language=[decorative]OCL,
	morekeywords={quota,implies,result,flatten,body,init,one,OrderedSet,Tuple,TupleType},
	morekeywords={def,attr,oclIsUndefined,oclIsInvalid,OclState,let,in},
	emph={Boolean,Integer,String,Real,UnlimitedNatural},
	morecomment=[l]{--},
	literate={->}{$\to$}{2} {--}{-$\,$-}{2} {<=}{$\le$}{2} {>=}{$\ge$}{2} {<>}{$<\,>$}{3}
}

\lstdefinelanguage{ATL}{
	morekeywords={rule,module,from,to,create,uses,using,embedded,refining,debug,context},
	morekeywords={context,def,let,in,if,then,else,endif},
	morekeywords={lazy,unique,helper,extends},
	morekeywords={union,intersection},
	morekeywords={select,collect,forAll},
	morekeywords={and,or,not,xor,implies,},
	morekeywords={foreach,in,do,for},
	morekeywords={Bag,Set,OrderedSet,Sequence,Tuple,Integer,Real,Boolean,String,TupleType,thisModule},
    morekeywords={true,false,
    derived,mapsTo,distinct,
    library,query,div,entrypoint},
	sensitive=true,
	morecomment=[l]{--},
	morestring=[b]',
	showstringspaces=false,
	literate={->}{$\to$}{2} {<-}{$\leftarrow$}{2} {<=}{$\le$}{2} {>=}{$\ge$}{2} {<>}{$<\,>$}{3}
}



\lstdefinelanguage{gremlin}{
morekeywords={as,def,fill,filter,groupCount,has,idx,inE,inV,is,label,length,match,outE,outV,v,values},
sensitive=true
}

\lstdefinelanguage{Xtext}{
	morekeywords={grammar,rule,generate,terminal},
	morekeywords={context,def,let,in,if,then,else,endif},
	morekeywords={lazy,unique,helper,extends},
	morekeywords={and,or},
	morekeywords={do},
	morekeywords={with, hidden, as, import, returns, terminal, enum},
	morekeywords=[3]{name},
	sensitive=true,
	morecomment=[l]{//}, 
	morecomment=[s]{/*}{*/},
	morestring=[b]',
	morestring=[b]",
	moredelim=**[is][\color{gray}]{`}{`},
	showstringspaces=false,
}



\lstdefinelanguage{TypeScript}{
  keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, let, interface, for},
  morekeywords={class, export, boolean, throw, implements, import, this, number, string, Array},
  sensitive=true,
  comment=[l]{//},
  morecomment=[s]{/*}{*/},
  morestring=[b]',
  morestring=[b]"
}

\lstdefinelanguage{AlgoScript}{
  keywords={vrai, faux, pour, allant de, Ã , faire, fait, si, alors, sinon, fin, et, ou, Debut, Fin},
  morekeywords={booleen, reel, mod, entier, cdc, tableau},
  sensitive=true,
  comment=[l]{//},
  morecomment=[s]{/*}{*/},
  commentstyle=\color{purple}\ttfamily,
  stringstyle=\color{red}\ttfamily,
  morestring=[b]',
  morestring=[b]"
}

\lstdefinelanguage{QVT}{
	morekeywords={checkonly, domain, enforce, extends, implementedby, import, key, overrides, primitive, query, relation, top},
	morekeywords={transformation, when, where, Bag, Collection, Dict, OrderedSet, Sequence, Set, Tuple, abstract, access}, 
	morekeywords={and, any, assert, blackbox, break, case, class, collect, collectNested, collectOne, collectselect, collectselectOne}, 
	morekeywords={composes, compute, configuration, constructor, continue, datatype, default, derived, disjuncts, do, elif}, 
	morekeywords={else, end, endif, enum, except, exists, extends, exception, false, forAll, forEach , forOne, from, helper}, 
	morekeywords={if, implies, import , in, inherits, init, inout, intermediate, invresolve, invresolveIn, invresolveone},
	morekeywords={invresolveoneIn , isUnique, iterate, late, let, library, literal, log, main, map, mapping, merges, metamodel}, 
	morekeywords={modeltype, new, not, null, object, one, or, ordered, out, package, population, primitive, property}, 
	morekeywords={query, raise, readonly, references, refines, reject, resolve, resolveIn, resolveone, resolveoneIn, return}, 
	morekeywords={select, selectOne, sortedBy, static, switch, tag, then, transformation, true, try, typedef, unlimited}, 
	morekeywords={uses, var, when, where, while, with, xcollect , xmap, xor, xselect},
	morecomment=[l]{--},
	morestring=[b]{'}
}

\lstdefinelanguage{ETL}{
	morekeywords={true, false, pre, rule, operation, var, transform, to, select, selectOne, all, @greedy, for, if, else},
	morekeywords={not, and, or, Any, String, Boolean, true, false, return},
	morecomment=[l]{//}, 
	morecomment=[s]{/*}{*/}, 
	morestring=[b]"
 }
 
\lstdefinelanguage{TDL}{
	keywords={all, charstring, integer, encode},
	morekeywords={Package, Import, from, Tester, SUT},
	morekeywords={accepts, sends, having, extends, uses},
	morekeywords={create, connect},
	morekeywords={Component, Gate, Type, Annotation},
	morekeywords={template, type, record, with, configuration},
	morekeywords={Data, Set, instance},
	morekeywords={Use, as, Map, to, in},
	morekeywords={Test, Configuration, Description, gate, instantiaye, fate, of, type, instantiate, gate, type},
	morestring=[b]{"},
	morestring=[b]{'}
}
 
\endinput